vim9script

var home = $HOME .. '/.vim/'
&undodir = $HOME .. '/.vim/undo'
mkdir(&undodir, 'p')
var vim_plug_dir = expand(home .. '/autoload')
var vim_plug = home .. '/autoload/plug.vim'
var install_plug = 0
if (!filereadable(vim_plug))
    system('curl -fLo ' .. vim_plug .. ' --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim')
    install_plug = 1
endif

packadd termdebug
g:termdebug_wide = 1

plug#begin(home .. '/plugged') #<<

#Plugin Group: AI #<<
#Plug 'github/copilot.vim' #<<
#imap <silent><expr> <C-p> copilot#Accept("\<CR>")
#g:copilot_no_tab_map = v:true
##>>
Plug 'Exafunction/codeium.vim' #<<
g:codeium_no_map_tab = v:true
imap <silent><expr> <C-p> codeium#Accept()
imap <C-n> <Plug>(codeium-next)
#>>
##>>

#Plugin Group: LSP #<<
Plug 'neoclide/coc.nvim', {'branch': 'master', 'do': 'yarn install --frozen-lockfile'} #<<
g:coc_global_extensions = [
    'coc-clang-format-style-options',
    'coc-clangd',
    'coc-cmake',
    'coc-json',
    #'coc-lists',
    'coc-pyright',
    'coc-r-lsp',
    'coc-sh',
    #'coc-tabnine',
    #'coc-vimlsp',
    'coc-yaml',
    'coc-snippets'
]
g:coc_enable_locationlist = 0
g:coc_quickfix_open_command = 'copen 8'
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr :cexpr[] <CR> <Plug>(coc-references)
nmap <silent> <Leader>x <Plug>(coc-fix-current)
nmap <silent> <Leader>r <Plug>(coc-rename)
nmap <silent> <Leader>v <Plug>(coc-range-select)
map <silent> <Leader>a <Plug>(coc-codeaction-cursor)
nmap <silent> <Leader>k <Plug>(coc-format)
vmap <silent> <leader>k <Plug>(coc-format-selected)
au User CocLocationsChange CocList --normal location

func g:OnFoldUpdated(err, result)
    if (a:result == v:null)
        if (!exists("b:fold_err_times"))
            let b:fold_err_times = 0
        endif

        if(b:fold_err_times < 3)
            let b:fold_err_times = b:fold_err_times + 1
            call timer_start(1000, {-> CocActionAsync('fold', function("g:OnFoldUpdated"))})
        endif
    else
        let b:fold_err_times = 0
        let b:foldedtick = b:changedtick
    endif
endf

def UpdateFold()
    if (!exists("b:foldedtick") || b:foldedtick < b:changedtick)
        exe 'call CocActionAsync("fold", function("g:OnFoldUpdated"))'
    endif
enddef

au CursorHold * silent! call CocActionAsync('highlight', v:null)
au BufWinEnter,CursorHold *.c,*.cpp,*.h,*.hpp silent! call UpdateFold()

command! A CocCommand clangd.switchSourceHeader

def CheckBackspace(): bool
    var col = col('.') - 1
    return !col || getline('.')[col - 1] =~ '\s'
enddef

# Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
            \ coc#pum#visible() ? coc#pum#next(1) :
            \ <SID>CheckBackspace() ? "\<Tab>" :
            \ coc#refresh()
inoremap <silent><expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"
#inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm() : "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

nmap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
nmap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
imap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
imap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
vmap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
vmap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
au User TermdebugStartPre silent CocDisable
au User TermdebugStopPost silent CocEnable
#>>
#>>

#Plugin Group: Theme #<<
Plug 'ayu-theme/ayu-vim' #<<
g:ayucolor = 'dark'
#>>
Plug 'joshdick/onedark.vim'
Plug 'nanotech/jellybeans.vim' #<<
g:jellybeans_use_term_italics = 0
g:jellybeans_use_gui_italics = 0
#>>
Plug 'romainl/Apprentice'
Plug 'tomasiser/vim-code-dark' #<<
g:codedark_modern = 1
#g:codedark_conservative = 1
#>>
Plug 'morhetz/gruvbox' #<<
g:gruvbox_contrast_dark = 'hard'
g:gruvbox_italic = 0
g:gruvbox_sign_column = 'bg0'
g:gruvbox_material_diagnostic_text_highlight = 1
#>>
Plug 'sainnhe/everforest' #<<
g:everforest_background = 'hard'
g:everforest_enable_italic = 0
g:everforest_disable_italic_comment = 1
g:everforest_sign_column_background = 'none'
g:everforest_diagnostic_text_highlight = 1
g:everforest_diagnostic_line_highlight = 0
g:everforest_better_performance = 1

#>>
Plug 'sainnhe/gruvbox-material' #<<
g:gruvbox_material_background = 'medium'
g:gruvbox_material_enable_italic = 0
g:gruvbox_material_disable_italic_comment = 1
g:gruvbox_material_sign_column_background = 'none'
#>>
Plug 'arcticicestudio/nord-vim' #<<
#>>
#>>

#Plugin Group: StatusLine #<<
Plug 'itchyny/vim-gitbranch' #<<
# >>
Plug 'itchyny/lightline.vim' #<<

au User CocStatusChange,CocDiagnosticChange call lightline#update()
def g:LightlineFugitive(): string
    var branch = gitbranch#name()
    return branch !=# '' ? 'î‚ ' .. branch : ''
enddef

g:lightline =
    {
        colorscheme: "everforest",
        active: {
            left: [
                ["mode", "paste", "readonly"],
                ["gitbranch"],
                ["relativepath"],
                ["modified"]
            ],
            right: [
                ["filetype"],
                ["fileformat", "fileencoding"],
                ["percent", "lineinfo"],
                ["cocstatus"]
            ]
        },
        inactive: {
            left: [
                ["mode", "paste"],
                ["readonly", "relativepath", "modified"],
                ["gitbranch"]
            ],
            right: [
                ["filetype"],
                ["fileformat", "fileencoding"],
                ["percent", "lineinfo"],
                ["cocstatus"]
            ]
        },
        component: {
            paste: "%{&paste?\"ðŸ“‹\":\"\"}",
            readonly: "%{&readonly?\"ðŸ”’\":\"\"}",
            relativepath: "%{expand(\"%:~:.\")}"
        },
        component_function: {
            gitbranch: "LightlineFugitive",
            cocstatus: "coc#status"
        },
        separator: {
            left: "î‚°",
            right: "î‚²"
        },
        subseparator: {
            left: "|",
            right: "|"
        }
    }

#>>
#Plug 'vim-airline/vim-airline' #<<
g:airline_experimental = 1
g:airline_powerline_fonts = 1
g:airline#extensions#csv#enabled = 0
g:airline#extensions#csv#column_display = 'Name'
g:airline#extensions#scrollbar#enabled = 0
g:airline#extensions#whitespace#checks = ['indent', 'trailing', 'mixed-indent-file']
g:airline#extensions#coc#show_coc_status = 0
#>>
#Plug 'vim-airline/vim-airline-themes'
#>>

#Plugin Group: Search #<<
Plug 'liuchengxu/vim-clap', { 'do': ':Clap install-binary!' } #<<
g:clap_open_preview = 'never'
g:clap_layout = {'relative': 'editor'}
g:clap_popup_input_delay = 0
g:clap_disable_run_rooter = v:true

nmap <silent> <Leader>F :Clap gfiles --name-only<CR>
nmap <silent> <Leader>f :Clap files --name-only<CR>
nmap <silent> <Leader>b :Clap buffers <CR>
#>>

#Plug 'Yggdroot/LeaderF', { 'do': ':LeaderfInstallCExtension' } #<<
g:Lf_WildIgnore = {
    'dir': ['.svn', '.git', '.hg', 'build', 'third_party', '.clangd', 'fuxi.run*'],
    'file': ['*.sw?', '~$*', '*.bak', '*.exe', '*.o', '*.so', '*.py[co]']
}
g:Lf_WindowHeight = 0.2
g:Lf_RecurseSubmodules = 1
g:Lf_GtagsAutoGenerate = 0
g:Lf_GtagsAutoUpdate = 0
g:Lf_GtagsStoreInProject = 1
g:Lf_DefaultExternalTool = 'rg'
g:Lf_UseVersionControlTool = 1
g:Lf_DefaultMode = 'NameOnly'
g:Lf_WindowPosition = 'popup'
g:Lf_PreviewInPopup = 1
g:Lf_PopupPreviewPosition = 'bottom'
g:Lf_CursorBlink = 0
g:Lf_PopupShowStatusline = 0
g:Lf_StlSeparator = {'left': 'î‚°', 'right': 'î‚²'}
g:Lf_ShowDevIcons = 0
g:Lf_WorkingDirectoryMode = 'a'
g:Lf_PreviewResult = {
    'File': 0,
    'Buffer': 0,
    'Mru': 0,
    'Tag': 0,
    'BufTag': 0,
    'Function': 1,
    'Line': 0,
    'Colorscheme': 0,
    'Rg': 0,
    'Gtags': 0
}

g:Lf_RgConfig = [
    '--glob=!third_party/*'
]

#nmap gR :<C-U><C-R>=printf("Leaderf! gtags --stayOpen --bottom -r %s", expand("<cword>"))<CR><CR>
#nmap gD :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
#nmap <Leader>g :<C-U><C-R>=printf("Leaderf! gtags --stayOpen --bottom -g %s", expand("<cword>"))<CR><CR>
#vmap <Leader>g :<C-U><C-R>=printf("Leaderf! gtags --stayOpen --bottom -g ".getline("'<")[getpos("'<")[2]-1:getpos("'>")[2]]<CR><CR>
#command! -nargs=1 S Leaderf! gtags --stayOpen --bottom -g <f-args>
#>>

#Plug 'linjiX/LeaderF-git' #<<
#>>
#>>

#Plugin Group: Edit #<<
Plug 'scrooloose/nerdcommenter'
Plug 'honza/vim-snippets'
#Plug 'Raimondi/delimitMate' #<<
g:delimitMate_expand_cr = 1
g:delimitMate_smart_matchpairs = '^\%(\w\|\!\)'
# >>
Plug 'cohama/lexima.vim' #<<
au VimEnter * lexima#add_rule({'char': '(', 'at': '\%#\S', 'except': '\%#)'})
    | lexima#add_rule({'char': '[', 'at': '\%#\S', 'except': '\%#]'})
    | lexima#add_rule({'char': '{', 'at': '\%#\S', 'except': '\%#}'})
    | lexima#add_rule({'char': '"', 'at': '\%#\S'})
    | lexima#add_rule({'char': '"', 'at': '\S\%#'})
    | lexima#add_rule({'char': "'", 'at': '\%#\S'})
    | lexima#add_rule({'char': "'", 'at': '\S\%#'})
    | lexima#add_rule({'char': '"', 'at': '"\%#"', 'leave': '"'})
    | lexima#add_rule({'char': "'", 'at': '''\%#''', 'leave': "'"})

# >>
# >>

#Plugin Group: Misc #<<
#Plug 'Yggdroot/indentLine' #<<
g:indentLine_setColors = 0
g:indentLine_fileType = ['c', 'cpp', 'python', 'r']
g:indentLine_char = 'â¸½'
#>>
#Plug 'skywind3000/asyncrun.vim'
#Plug 'ianding1/leetcode.vim' #<<
g:leetcode_browser = 'firefox'
#>>
Plug 'mhinz/vim-startify' #<<
g:startify_session_persistence = 1
g:startify_change_to_dir = 0
g:startify_fortune_use_unicode = 1
g:startify_relative_path = 1
autocmd User Startified setlocal cursorline
#>>
Plug 'tpope/vim-fugitive'
Plug 'chrisbra/csv.vim' #<<
g:no_csv_maps = 1
g:csv_no_progress = 1
g:start = 1
g:end = 10
#>>
#Plug 'mechatroner/rainbow_csv'
Plug 'bbchung/gtags.vim' #<<
g:Gtags_Auto_Update = 1
nmap <silent> <Leader>s :GtagsCursor<CR>
nmap <silent> <Leader>g :<C-R>=printf("Gtags -g %s", expand('<cword>'))<CR><CR>:copen<CR>
vmap <silent> <Leader>g :<C-U><C-R>=printf("Gtags -g %s", getline("'<")[getpos("'<")[2]-1:getpos("'>")[2] - 1])<CR><CR>:copen<CR>
#>>
#>>

plug#end()

if (install_plug == 1)
    PlugInstall
endif

#>>

syntax on

set synmaxcol=10000
set vb t_vb=
set guicursor=
set signcolumn=number
set cst
set csprg=gtags-cscope
set cscopequickfix=s-,c-,d-,i-,t-,e-,a-
set belloff=all
set completeopt=menuone,noinsert
set termguicolors
set shortmess-=S
set shortmess+=Ac
set title
set cursorline
set nowrap
set mouse=a
set mousemodel=popup_setpos
set laststatus=2
set number
set expandtab
set softtabstop=4
set tabstop=4
set shiftwidth=4
set scrolloff=8
set sidescrolloff=8
set incsearch
set hlsearch
set ignorecase
set smartcase
set pumheight=12
set previewheight=4
set foldlevelstart=99
set wildmode=longest,full
set wildmenu
set wildoptions=pum,fuzzy
set grepprg=grep\ -nH\ $*
set encoding=utf-8
set fileencodings=utf-8,big5,gb2312,utf16le
set fileformats=unix,dos
set updatetime=200
set hidden
set nobackup
set nowritebackup
set undofile
set backspace=indent,eol,start
set mmp=10000
set splitright
set re=2
set matchpairs+=<:>

def ShowDoc()
    if (index(['csv'], &filetype) >= 0)
        exe 'WhatColumn!'
    elseif (index(['vim', 'help'], &filetype) >= 0)
        exe 'h ' .. expand('<cword>')
    else
        if g:CocAction('hasProvider', 'hover')
            g:CocActionAsync('doHover')
        endif
    endif
enddef

command! W silent exe "w !sudo > /dev/null tee %"
vnoremap <silent> * :<C-U>
            \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
            \gvy/<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
            \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
            \gVzv:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> # :<C-U>
            \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
            \gvy?<C-R>=&ic?'\c':'\C'<CR><C-R><C-R>=substitute(
            \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
            \gVzv:call setreg('"', old_reg, old_regtype)<CR>

map <C-c> <Esc>
imap <C-c> <Esc>
nmap <silent> <F3> :bd!<CR>
map <silent> <F4> :qa!<CR>
tmap <F4> <C-W>N:qa!<CR>
nmap <silent> <F5> :bp<CR>
nmap <silent> <F6> :bn<CR>
nmap Q <Nop>
tmap <Esc><Esc> <C-W>N
nmap <silent> K :call <SID>ShowDoc()<CR>

function CsvFormat()
    silent '<,'>CSVArrangeColumn
endf

#au BufRead * cd .
au FileType sh,python,vim setlocal tw=0 expandtab
au FileType gitcommit setlocal spell
au FileType markdown setlocal textwidth=80
au FileType c,cpp,python setlocal formatexpr=g:CocAction('formatSelected')
au FileType csv setlocal formatexpr=CsvFormat()
au FileType c,cpp setlocal fdm=manual
#au InsertEnter * if !exists('w:last_fdm') | w:last_fdm = &foldmethod | setlocal foldmethod=manual | endif
#au InsertLeave,WinLeave * if exists('w:last_fdm') | &l:foldmethod = w:last_fdm | unw:last_fdm | endif

set background=dark
if (&diff)
    set noro
    syntax off
    set nocursorline
    g:coc_start_at_startup = 0
else
    au BufReadPost * if (line("'\"") > 0 && line("'\"") <= line("$")) | exe "normal! g`\"" | endif " restore cursor position
endif
colorscheme everforest
#hi link CocHighlightText MatchParen
# vim:foldmarker=<<,>>:foldlevel=0:foldmethod=marker:
